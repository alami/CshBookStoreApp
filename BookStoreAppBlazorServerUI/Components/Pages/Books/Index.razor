@page "/books/"
@inject IBookService bookService
@inject IJSRuntime js
<h3>Index</h3>
@if (response.Success == false)
{
    <div class="alert alert-danger"><h4>@response.Message</h4></div>
}
@if (Books == null)
{
    <div class="alert alert-info"><h4>Loading Data...</h4></div>
}
else
{
    <AuthorizeView Roles="Administrator">
        <a href="/books/create" class="btn btn-dark"><span class="bi bi-list-nested-nav-menu"></span>Create</a>
        <br />
    </AuthorizeView>
    <table class="table table-responsive">
        <thead>
        <th></th>
        <th>Title</th>
        <th>Price</th>
        <th>Author Name</th>
        <th>Actions</th>
        </thead>
        <tbody>
            @foreach (var book in Books)
            {
                <tr>
                    <td><img src="@book.Image" width="100" height="100" alt="@book.Title" /></td>
                    <td>@book.Title</td>
                    <td>@book.Price.ToString("C")</td>
                    <td>
                        <a href="/books/details/@book.Id" class="btn btn-primary"><span class="bi bi-list-nested-nav-menu"></span>Details</a>
                        <AuthorizeView Roles="Administrator">
                            <a href="/books/update/@book.Id" class="btn btn-warning"><span class="bi bi-list-nested-nav-menu"></span>Edit</a>
                            <button @onclick="@(() => Delete(@book.Id))" class="btn btn-danger"><span class="bi bi-list-nested-nav-menu"></span>Delete</button>
                        </AuthorizeView>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    private List<BookReadOnlyDto> Books;
    private Response<List<BookReadOnlyDto>> response = new Response<List<BookReadOnlyDto>>
    {
        Success = true
    };

    protected override async Task OnInitializedAsync()
    {
        // ( Books = await httpClient.BooksAllAsync()).ToList();
        response = await bookService.Get();
        if (response.Success)
        {
            Books = response.Data;
        }
    }
    private async Task Delete(int bookId)
    {
        var book = Books.First(q => q.Id == bookId);
        var conform = await js.InvokeAsync<bool>("confirm", $"Are You Sure Want to Delete {book.Title}  ?");
        if (conform)
        {
            var respose = await bookService.Delete(bookId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
